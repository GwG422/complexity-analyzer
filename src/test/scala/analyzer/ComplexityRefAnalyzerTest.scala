package analyzer

import analyzer.ComplexityAnalyzer.extractNumbers
import org.scalatest.{FlatSpec, Matchers}
import Complexity._

class ComplexityRefAnalyzerTest extends FlatSpec with Matchers {

  class Fixture {
    private val o1Input = "12 10 12 11 12 10 13 12 13 10 12 12 11 12 11 11000000000 11 11 12 12 12 11 11 13 13 12 11 12 10 11 11 11 10 10 10 11 11 12 10 10 11 12 12 11 11 10 11 12 12 10 12 13 12 10 11 10 13 11 11 12 13 12 11 10 10 10 11 13 12 11 10 11 12 12 10 12 12 12 11 11 12 10 12 11 11 10 15 10 11 12 11 10 12 11 12 10 11 11 11 10"
    private val onInput = "10 22 33 46 58 71 77 86 102 118 126 139 145 156 172 183 196 207 216 229 238 2500000 262 268 297 291 320 322 330 339 357 353 363 384 382 403 407 434 439 442 456 474 475 491 494 509 521 528 542 557 566 584 579 603 606 623 631 638 640 659 695 701 721 729 729 745 757 779 778 802 804 806 829 842 839 833 887 885 873 931 936 934 960 948 984 997 1015 1030 1022 1030 1051 1074 1070 1053 1060 1104 1122 1131 1145 1164"
    private val on2Input = "15 48 109 186 284 425 567 733 956 1160 1390 1679 1958 2277 2601 2898 3240 3686 4149 4538 4940 5452 5927 64040000 7186 7664 8306 8919 9530 10355 10903 11619 12338 12865 14034 14976 15607 16549 17272 18374 19272 20212 21105 22115 22968 23719 25193 26201 27479 27915 28923 30563 32014 33246 33972 35592 37317 38742 39803 41366 42065 43606 45264 46831 48592 49850 51611 52791 54157 55819 57480 58695 60156 61258 64065 65755 67664 68838 75916 81997 77792 76492 77801 76994 80316 83855 84277 87380 90576 91212 93107 95577 96407 98361 101156 104473 107195 108137 107559 110948"
    private val logNInput = "10 23 23 32 32 34 33 45 43 47 47 45 41 45 42 54 51 55 57 53 56 53 59 56 56 56 52 55 55 54 56 68 64 68 70 6700000 63 65 67 61 68 69 67 67 68 65 62 66 70 67 62 65 64 66 68 63 64 64 65 69 67 68 69 79 79 75 76 80 79 77 79 79 77 78 74 77 74 78 75 77 78 80 76 81 81 79 83 77 76 81 76 81 82 79 78 79 75 78 83 82"
    private val in2nInput = "85 43 92 183 360 709 1447 2881000000 5698 11422 22693 45464 90480 183747 368400"
    private val nLogNInput = "14 33 58 94 128 163 191 243 289 347 385 430 475 52800000 567 626 680 767 823 864 928 987 1039 1102 1149 1202 1279 1338 1400 1457 1524 1588 1646 1749 1807 1866 1929 1990 2073 2142 2216 2275 2333 2421 2494 2569 2603 2705 2758 2865 2877 2984 2995 3123 3209 3259 3336 3442 3476 3545 3598 3681 3759 3837 3947 4020 4111 4171 4256 4326 4405 4457 4532 4644 4735 4792 4931 4978 5074 5143 5243 5309 5401 5481 5566 5619 5711 5826 5850 5941 6050 6118 6230 6292 6337 6467 6522 6610 6703 6781"
    val o1In = extractNumbers(o1Input)::Nil
    val logNIn = extractNumbers(logNInput)::Nil
    val onIn = extractNumbers(onInput)::Nil
    val on2In = extractNumbers(on2Input)::Nil
    val in2nIn = extractNumbers(in2nInput)::Nil
    val nLogN = extractNumbers(nLogNInput)::Nil
  }

  "ComplexityAnalyzer" should "detect O(1)" in new Fixture {
    ComplexityAnalyzer.analyze(o1In) should be(O1)
  }

  it should "detect O(log(N))" in new Fixture {
    ComplexityAnalyzer.analyze(logNIn) should be(OLogN)
  }

  it should "detect O(N)" in new Fixture {
    ComplexityAnalyzer.analyze(onIn) should be(On)
  }

  it should "detect O(N*log(N))" in new Fixture {
    ComplexityAnalyzer.analyze(nLogN) should be(OnLogN)
  }

  it should "detect O(N^2)" in new Fixture {
    ComplexityAnalyzer.analyze(on2In) should be(On2)
  }

  it should "detect O(2^N)" in new Fixture {
    ComplexityAnalyzer.analyze(in2nIn) should be(O2n)
  }
}